{"version":3,"sources":["../VerbalExpressions.js"],"names":["VerbalExpression","_prefixes","_source","_suffixes","_modifiers","value","pattern","compile","enable","add","sanitize","then","anyOf","i","length","from","to","lineBreak","modifier","includes","replace","addModifier","removeModifier","isInteger","quantity","values","filter","test","argument","join","count","source","undefined","slice","toString","components","match","flags","RegExp","toEscape","lastMatch","root","factory","define","amd","module","exports","VerEx"],"mappings":"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","file":"verbalexpressions.js","sourcesContent":["/*!\n * VerbalExpressions JavaScript Library\n * https://github.com/VerbalExpressions/JSVerbalExpressions\n *\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n */\n\n/**\n * Define the VerbalExpression class.\n * @class\n */\nclass VerbalExpression extends RegExp {\n    /**\n     * Construct an instance of VerbalExpression\n     * @constructor\n     * @alias VerEx\n     * @return {VerbalExpression} A new instance of VerbalExpression\n     */\n    constructor() {\n        // Call the `RegExp` constructor so that `this` can be used\n        super('//gm');\n\n        // Variables to hold the expression construction in order\n        this._prefixes = '';\n        this._source = '';\n        this._suffixes = '';\n        this._modifiers = 'gm'; // 'global, multiline' matching by default\n    }\n\n    // Utility //\n\n    /**\n     * Escape metacharacters in the parameter and make it safe for adding to the expression\n     * @param {String} value string to sanitize\n     * @return {String} sanitized value\n     */\n    static sanitize(value) {\n        if (value.source) {\n            return value.source;\n        }\n\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        // Regular expression to match meta characters\n        // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n        const toEscape = /([\\].|*?+(){}^$\\\\:=[])/g;\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastMatch\n        const lastMatch = '$&';\n\n        // Escape meta characters\n        return value.replace(toEscape, `\\\\${lastMatch}`);\n    }\n\n    /**\n     * Add stuff to the expression and compile the new expression so it's ready to be used.\n     * @param {string} value literal expression, not sanitized\n     * @return {VerbalExpression} Freshly recompiled instance of VerbalExpression\n     */\n    add(value = '') {\n        this._source += value;\n        const pattern = this._prefixes + this._source + this._suffixes;\n\n        this.compile(pattern, this._modifiers);\n\n        return this;\n    }\n\n    // Rules //\n\n    /**\n     * Control start-of-line matching\n     * @param {Boolean} enable Control start-of-line matching\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    startOfLine(enable = true) {\n        this._prefixes = enable ? '^' : '';\n        return this.add();\n    }\n\n    /**\n     * Control end-of-line matching\n     * @param {Boolean} enable Control end-of-line matching\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    endOfLine(enable = true) {\n        this._suffixes = enable ? '$' : '';\n        return this.add();\n    }\n\n    /**\n     * Look for the value passed\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    then(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})`);\n    }\n\n    /**\n     * Alias for then() to allow for readable syntax when then() is the first method in the chain.\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    find(value) {\n        return this.then(value);\n    }\n\n    /**\n     * Add optional values\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    maybe(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:${value})?`);\n    }\n\n    /**\n     * Add alternative expressions\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    or(value) {\n        this._prefixes += '(?:';\n        this._suffixes = `)${this._suffixes}`;\n\n        this.add(')|(?:');\n\n        if (value) {\n            this.then(value);\n        }\n\n        return this;\n    }\n\n    /**\n     * Any character any number of times\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    anything() {\n        return this.add('(?:.*)');\n    }\n\n    /**\n     * Anything but these characters\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    anythingBut(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]*)`);\n    }\n\n    /**\n     * Any character at least one time\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    something() {\n        return this.add('(?:.+)');\n    }\n\n    /**\n     * Any character at least one time except for these characters\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    somethingBut(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`(?:[^${value}]+)`);\n    }\n\n    /**\n     * Match any given character\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    anyOf(value) {\n        value = VerbalExpression.sanitize(value);\n        return this.add(`[${value}]`);\n    }\n\n    /**\n     * Shorthand for anyOf(value)\n     * @param {String} value value to find\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    any(value) {\n        return this.anyOf(value);\n    }\n\n    /**\n     * Usage: .range( from, to [, from, to ... ] )\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    range(...ranges) {\n        let value;\n\n        for (let i = 0; i < ranges.length; i += 2) {\n            const from = VerbalExpression.sanitize(ranges[i - 1]);\n            const to = VerbalExpression.sanitize(ranges[i]);\n\n            value += `${from}-${to}`;\n        }\n\n        return this.add(`[${value}]`);\n    }\n\n    // Special characters //\n\n    /**\n     * Match a Line break\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    lineBreak() {\n        return this.add('(?:\\\\r\\\\n|\\\\r|\\\\n)'); // Unix(LF) + Windows(CRLF)\n    }\n\n    /**\n     * A shorthand for lineBreak() for html-minded users\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    br() {\n        return this.lineBreak();\n    }\n\n    /**\n     * Match a tab character\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    tab() {\n        return this.add('\\\\t');\n    }\n\n    /**\n     * Match any alphanumeric\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    word() {\n        return this.add('\\\\w+');\n    }\n\n    /**\n     * Match a single digit digit\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    digit() {\n        return this.add('\\\\d');\n    }\n\n    /**\n     * Match a single whitespace\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    whitespace() {\n        return this.add('\\\\s');\n    }\n\n    // Modifiers //\n\n    /**\n     * Add modifier\n     * @param {String} modifier modifier to add\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    addModifier(modifier) {\n        if (!this._modifiers.includes(modifier)) {\n            this._modifiers += modifier;\n        }\n\n        return this.add();\n    }\n\n    /**\n     * Remove modifier\n     * @param {String} modifier modifier to remove\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    removeModifier(modifier) {\n        this._modifiers = this._modifiers.replace(modifier, '');\n        return this.add();\n    }\n\n    /**\n     * Case-insensitivity modifier\n     * @param {Boolean} enable Control case-insensitive matching\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    withAnyCase(enable = true) {\n        return enable ? this.addModifier('i') : this.removeModifier('i');\n    }\n\n    /**\n     * Default behaviour is with \"g\" modifier, so we can turn this another way around than other modifiers\n     * @param {Boolean} enable Control global matching\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    stopAtFirst(enable = true) {\n        return enable ? this.removeModifier('g') : this.addModifier('g');\n    }\n\n    /**\n     * Control the multiline modifier\n     * @param {Boolean} enable Control multi-line matching\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    searchOneLine(enable = true) {\n        return enable ? this.removeModifier('m') : this.addModifier('m');\n    }\n\n    /**\n     * Repeat the previous item exactly n times or between n and m times.\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    repeatPrevious(...quantity) {\n        const isInteger = /\\d+/;\n        const values = quantity.filter(argument => isInteger.test(argument));\n\n        if (values.length > 0) {\n            this.add(`{${values.join()}}`);\n        }\n\n        return this;\n    }\n\n    // Loops //\n\n    /**\n     * Repeat the previous at least once\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    oneOrMore() {\n        return this.add('+');\n    }\n\n    /**\n     * Match the value zero or more times\n     * @param {String} value value to find\n     * @param {Integer?} count number of times the value should be repeated\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    multiple(value, count) {\n        // Use expression or string\n        value = value.source || VerbalExpression.sanitize(value);\n\n        this.add(`(?:${value})`);\n\n        if (count === undefined) {\n            this.add('*'); // Any number of times\n        } else {\n            this.add(`{${count}}`);\n        }\n\n        return this;\n    }\n\n    // Capture groups //\n\n    /**\n     * Starts a capturing group\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    beginCapture() {\n        // Add the end of the capture group to the suffixes temporarily so that compilation continues to work\n        this._suffixes += ')';\n        return this.add('(');\n    }\n\n    /**\n     * Ends a capturing group\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    endCapture() {\n        // Remove the last parenthesis from the _suffixes and add it to the regex\n        this._suffixes = this._suffixes.slice(0, -1);\n        return this.add(')');\n    }\n\n    // Miscellaneous //\n\n    /**\n     * Shorthand function for the String.replace function to allow for a more logical flow.\n     * @param {String} source string to search for\n     * @param {String} value value to replace with\n     * @return {VerbalExpression} same instace of VerbalExpression\n     */\n    replace(source, value) {\n        source = source.toString();\n        return source.replace(this, value);\n    }\n\n    /**\n     * Convert to RegExp object\n     * @return {RegExp} Converted RegExp instance\n     */\n    toRegExp() {\n        const components = this.toString().match(/\\/(.*)\\/([gimuy]+)?/);\n        const pattern = components[1];\n        const flags = components[2];\n\n        return new RegExp(pattern, flags);\n    }\n}\n\n// UMD (Universal Module Definition)\n// https://github.com/umdjs/umd\n((root, factory) => {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.VerEx = factory();\n    }\n})(this, () => () => new VerbalExpression());\n"]}